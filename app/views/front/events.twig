<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ZHOO - Event Page</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <link rel="shortcut icon" href="../../../public/assets/Favicon/favicon-32x32.png" type="image/x-icon" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />
    <style>
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #121212; }
        ::-webkit-scrollbar-thumb {
            background-color: #d4d4c6;
            border-radius: 10px;
            border: 2px solid #fff;
        }
        .event-card.expired { background-color: rgba(239, 68, 68, 0.1); }
        .event-card.full { background-color: rgba(245, 158, 11, 0.1); }
        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
            display: none;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-900 text-white min-h-screen">
    {% block content %}
    <header class="  z-50 bg-[#] shadow-sm text-white">
				<div
					class="container mx-auto px-4 flex items-center">
					<!-- logo -->
					<div class="mr-auto md:w-48 flex-shrink-0">
						<a href="/"><img class="h-16 md:h-20 ml-4" src="../../../public/assets/Logo/banner.png" alt=""/></a>
					</div>
					<!-- buttons -->
					<nav class="contents">
						<ul class="ml-4 flex items-center justify-end">
							{% if session.user %}
								<a class="ml-2 lg:ml-4 pt-4 relative inline-block hover:bg-gray-800 rounded-md flex flex-col items-center cursor-pointer" href='{{session.user.role == "admin" ? "/admin" : "/userDash"}}'>
									<img class="h-8 w-8 rounded-full" src="{{ session.user.avatar_url ?: '/assets/uploads/userAvatar/5856.jpg' }}" alt="Profile Image"/>
									<span class="px-4 py-2 text-white duration-200 hover:text-white">
										{{session.user.name}}
									</span>
								</a>
								<li class="ml-2 lg:ml-4 relative inline-block">
									<a class="px-4 py-2 rounded-md text-white duration-200 hover:bg-gray-800 hover:text-white flex items-center" href="/logout">
										<i class="fas fa-sign-out-alt mr-2"></i> Logout
									</a>
								</li>
							{% else %}
								<li class="ml-2 lg:ml-4 relative inline-block">
									<a class="px-4 py-2 rounded-md text-white duration-200 hover:bg-gray-800 hover:text-white" href="/login">
										Login
									</a>
								</li>
								<li class="ml-2 lg:ml-4 relative inline-block">
									<a class="px-4 py-2 rounded-md text-white duration-200 hover:bg-gray-800 hover:text-white" href="/signup">
										Register
									</a>
								</li>
							{% endif %}
						</ul>
					</nav>
				</div>
				<hr/>
				
			</header>
    <div class="container mx-auto px-4 py-8">
        <!-- Header with animated count -->
        <!-- Header Section -->
<div class="text-center mb-12">
  <h1 class="text-5xl font-bold mb-2">Upcoming Events</h1>
  <p class="text-xl text-gray-400" id="eventCount">
    Showing {{ events|length }} amazing events
  </p>
</div>

<!-- Enhanced Search and Filters Section -->
<div class="max-w-4xl mx-auto mb-12">
  <div class="relative mb-8">
    <input
      type="text"
      id="searchInput"
      class="w-full p-4 pl-12 rounded-xl bg-gray-800 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 transition-all"
      placeholder="Search events by name, artist, or tags..."
    />
    <i class="fas fa-search absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
    <div
      id="autocompleteResults"
      class="hidden absolute top-full left-0 w-full mt-1 bg-gray-800 rounded-xl shadow-lg z-50 max-h-60 overflow-y-auto"
    ></div>
  </div>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <select
      id="categoryFilter"
      class="p-3 rounded-xl bg-gray-800 text-white border border-gray-700 focus:ring-2 focus:ring-yellow-400 focus:outline-none"
    >
      <option value="">All Categories</option>
      {% for category in categories %}
        <option value="{{ category.id }}">{{ category.title }}</option>
      {% endfor %}
    </select>

    <select
      id="priceFilter"
      class="p-3 rounded-xl bg-gray-800 text-white border border-gray-700 focus:ring-2 focus:ring-yellow-400 focus:outline-none"
    >
      <option value="">Any Price</option>
      <option value="free">Free</option>
      <option value="paid">Paid</option>
    </select>
  </div>
</div>

<!-- Loading Spinner -->
<div id="loadingSpinner" class="loading-spinner" style="display: none;"></div>

<!-- Events Container -->
<div id="events-container" class="grid gap-6 px-28">
  {% include 'front/events_list.twig' %}
</div>

</div>
  <script>
document.addEventListener('DOMContentLoaded', () => {
  const searchInput = document.getElementById('searchInput');
  const categoryFilter = document.getElementById('categoryFilter');
  const priceFilter = document.getElementById('priceFilter');
  const eventsContainer = document.getElementById('events-container');

  // Delay (in milliseconds) before displaying the events
  const displayDelay = 500;

  // Update the events list and event count based on filters
  function updateResults() {
    // Hide the events container before starting the loading animation
    eventsContainer.style.display = 'none';
    toggleLoading(true);

    const params = new URLSearchParams({
      search: searchInput.value,
      category: categoryFilter.value,
      price: priceFilter.value,
    });

    fetch(`/events/filter?${params}`)
      .then(response => response.text())
      .then(html => {
        // Delay to let the loading spinner show
        setTimeout(() => {
          // Inject the new HTML content
          eventsContainer.innerHTML = html;

          // Update event count based on rendered event cards
          const eventCards = eventsContainer.querySelectorAll('.event-card');
          updateEventCount(eventCards.length);

          // Hide the spinner and fade in the events container (with grid layout)
          toggleLoading(false);
          fadeIn(eventsContainer, 500);
        }, displayDelay);
      })
      .catch(err => {
        console.error(err);
        toggleLoading(false);
      });
  }

  // Debounced version of updateResults to limit rapid calls
  const debouncedUpdateResults = debounce(updateResults, 300);

  // Attach listeners to trigger filtering on input and change events
  [searchInput, categoryFilter, priceFilter].forEach(element => {
    element.addEventListener('input', debouncedUpdateResults);
    element.addEventListener('change', debouncedUpdateResults);
  });
});

// Fade in helper function using CSS transitions
function fadeIn(element, duration) {
  element.style.opacity = 0;
  // Restore grid layout to preserve the gap between cards
  element.style.display = 'grid';
  element.style.transition = `opacity ${duration}ms ease-in-out`;

  // Force a reflow so that the transition starts
  void element.offsetWidth;
  element.style.opacity = 1;
}

// Autocomplete functionality for the search input
document.getElementById('searchInput').addEventListener('input', async function(e) {
  const term = e.target.value;
  if (term.length < 2) {
    document.getElementById('autocompleteResults').classList.add('hidden');
    return;
  }

  try {
    const response = await fetch(`/events/autocomplete?term=${term}`);
    const results = await response.json();

    const resultsContainer = document.getElementById('autocompleteResults');
    resultsContainer.innerHTML = results
      .map(result => `<div class="p-3 hover:bg-gray-700 cursor-pointer">${result}</div>`)
      .join('');

    resultsContainer.classList.toggle('hidden', results.length === 0);
  } catch (error) {
    console.error('Autocomplete error:', error);
  }
});

// Debounce helper to limit function calls
function debounce(func, wait) {
  let timeout;
  return function (...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
}

// Show or hide the loading spinner
function toggleLoading(show) {
  const spinner = document.getElementById("loadingSpinner");
  spinner.style.display = show ? "block" : "none";
}

// Update event count in the header
function updateEventCount(count) {
  const countElement = document.getElementById("eventCount");
  countElement.textContent = `Showing ${count} amazing event${count !== 1 ? "s" : ""}`;
}

// Helper to render tags whether they come as a string or an array.
function renderTags(tags) {
  let tagsArray = [];
  if (!tags) return "";
  if (Array.isArray(tags)) {
    tagsArray = tags;
  } else if (typeof tags === "string") {
    // Remove curly braces if present and split by comma
    tagsArray = tags.replace(/^\{|\}$/g, "").split(",");
  }
  return tagsArray
    .map(tag => `<span class="px-3 py-1 bg-gray-700 rounded-full text-xs text-white">${tag.trim()}</span>`)
    .join("");
}

// --- Handle Participation ---
async function handleParticipation(eventId) {
  {% if not session.user %}
    window.location.href = "/login";
    return;
  {% endif %}
  try {
    const response = await fetch(`/events/${eventId}/participate`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": "{{ csrf_token }}",
      },
    });
    if (response.ok) {
      const notification = document.createElement("div");
      notification.className =
        "fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg";
      notification.innerHTML = `
        <div class="flex items-center">
          <i class="fas fa-check-circle mr-2"></i>
          <span>Successfully registered for the event!</span>
        </div>
      `;
      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 3000);
      // Refresh the events list after participation
      updateResults();
    } else {
      throw new Error("Failed to register");
    }
  } catch (error) {
    console.error("Error:", error);
    const notification = document.createElement("div");
    notification.className =
      "fixed bottom-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg";
    notification.innerHTML = `
      <div class="flex items-center">
        <i class="fas fa-exclamation-circle mr-2"></i>
        <span>Failed to register for the event. Please try again.</span>
      </div>
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  }
}

</script>
{% endblock %}

</body>
</html>
